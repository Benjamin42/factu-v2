<?php

namespace App\Repository;

use App\Entity\Commande;
use App\Entity\Product;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\EntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * CommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Commande::class);
    }

    public function getNextNumFactu()
    {
        try {
            $commande = $this->createQueryBuilder('c')
                ->orderBy("c.numFactu", "desc")
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();
            if ($commande != null) {
                return $commande->getNumFactu() + 1;
            } else {
                return 1;
            }
        } catch (\Doctrine\ORM\NoResultException $e) {
            return 1;
        }
    }

    public function getLastAdded()
    {
        return $this->createQueryBuilder('c')
        ->orderBy('c.id', 'desc')
        ->setMaxResults(3)
        ->getQuery()
        ->getResult();
    }

    public function getCommandeToDelivery()
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.toDelivered = 1')
            ->andWhere('c.isDelivered = 0')
            ->getQuery()
            ->getResult();
    }

    public function getNbCommandeToDelivery()
    {
        $listCommandes = $this->getCommandeToDelivery();
        if ($listCommandes != null) {
            return count($listCommandes);
        } else {
            return 0;
        }
    }

    public function getCommandesByYearMonthDay($month, $year)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
            ->where('YEAR(c.dateFactu) = :year')
            ->andWhere('MONTH(c.dateFactu) = :month')
            ->setParameter('year', $year)
            ->setParameter('month', $month)
            ->orderBy('c.dateFactu', 'ASC');

        $listResult = $qb->getQuery()->getResult();
        return $listResult;
    }

    public function findAllWithSpecificBdl($bdl)
    {
        return $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.bdl = :bdl')
            ->setParameter('bdl', $bdl)
            ->orderBy('c.dateFactu', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findAllOrderByDateFactuDesc()
    {

        $qb = $this->createQueryBuilder('c');
        $qb->select('c');

        $qb->orderBy('c.dateFactu', 'ASC');

        $listResult = $qb->getQuery()->getResult();
        return $listResult;
    }


    public function getCommandeWithBdlId($id)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
            ->where('c.bdl = :id');

        $qb->setParameter('id', $id);

        $listResult = $qb->getQuery()->getResult();
        return $listResult;
    }

    public function remove(Commande $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
}
