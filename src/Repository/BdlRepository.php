<?php

namespace App\Repository;

use App\Entity\Bdl;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\EntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * BdlRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BdlRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Bdl::class);
    }

    public function getNextNumBdl()
    {
        try {
            $bdl = $this->createQueryBuilder('c')
                ->orderBy('c.numBdl', 'desc')
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();
            if ($bdl != null) {
                return $bdl->getNumBdl() + 1;
            } else {
                return 1;
            }
        } catch (\Doctrine\ORM\NoResultException $e) {
            return 1;
        }
    }

    public function getLastAdded()
    {
        return $this->createQueryBuilder('c')
            ->orderBy('c.id', 'desc')
            ->setMaxResults(3)
            ->getQuery()
            ->getResult();
    }

    public function getBdlToDelivery()
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.toDelivered = 1')
            ->andWhere('c.isDelivered = 0')
            ->getQuery()
            ->getResult();
    }

    public function getNbBdlToDelivery()
    {
        $listBdls = $this->getBdlToDelivery();
        if ($listBdls != null) {
            return count($listBdls);
        } else {
            return 0;
        }
    }

    public function getBdlsByYearMonthDay($month, $year)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');

        $qb = $this->createQueryBuilder('c');
        $qb->select('c')
            ->where('YEAR(c.dateBdl) = :year')
            ->andWhere('MONTH(c.dateBdl) = :month');

        $qb->setParameter('year', $year)
            ->setParameter('month', $month);

        $qb->orderBy('c.dateBdl', 'ASC');

        $listResult = $qb->getQuery()->getResult();
        return $listResult;
    }

    public function remove(Bdl $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
}
